C51 COMPILER V9.60.7.0   IIC                                                               02/27/2025 21:00:53 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE IIC
OBJECT MODULE PLACED IN .\Objects\iic.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE iic.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\iic.l
                    -st) TABS(2) OBJECT(.\Objects\iic.obj)

line level    source

   1          #include "iic.h"
   2          
   3          sbit scl = P2 ^ 0;
   4          sbit sda = P2 ^ 1;
   5          
   6          
   7          
   8          //
   9          #define DELAY_TIME  5
  10          
  11          //
  12          static void I2C_Delay(unsigned char n)
  13          {
  14   1          do
  15   1          {
  16   2              _nop_();_nop_();_nop_();_nop_();_nop_();
  17   2              _nop_();_nop_();_nop_();_nop_();_nop_();
  18   2              _nop_();_nop_();_nop_();_nop_();_nop_();    
  19   2          }
  20   1          while(n--);       
  21   1      }
  22          
  23          void Delay15ms()  //@12.000MHz
  24          {
  25   1        unsigned char data i, j;
  26   1      
  27   1        i = 176;
  28   1        j = 21;
  29   1        do
  30   1        {
  31   2          while (--j);
  32   2        } while (--i);
  33   1      }
  34          
  35          
  36          //
  37          void I2CStart(void)
  38          {
  39   1          sda = 1;
  40   1          scl = 1;
  41   1        I2C_Delay(DELAY_TIME);
  42   1          sda = 0;
  43   1        I2C_Delay(DELAY_TIME);
  44   1          scl = 0;    
  45   1      }
  46          
  47          //
  48          void I2CStop(void)
  49          {
  50   1          sda = 0;
  51   1          scl = 1;
  52   1        I2C_Delay(DELAY_TIME);
  53   1          sda = 1;
  54   1        I2C_Delay(DELAY_TIME);
C51 COMPILER V9.60.7.0   IIC                                                               02/27/2025 21:00:53 PAGE 2   

  55   1      }
  56          
  57          //
  58          void I2CSendByte(unsigned char byt)
  59          {
  60   1          unsigned char i;
  61   1        
  62   1          for(i=0; i<8; i++){
  63   2              scl = 0;
  64   2          I2C_Delay(DELAY_TIME);
  65   2              if(byt & 0x80){
  66   3                  sda = 1;
  67   3              }
  68   2              else{
  69   3                  sda = 0;
  70   3              }
  71   2          I2C_Delay(DELAY_TIME);
  72   2              scl = 1;
  73   2              byt <<= 1;
  74   2          I2C_Delay(DELAY_TIME);
  75   2          }
  76   1        
  77   1          scl = 0;  
  78   1      }
  79          
  80          //
  81          unsigned char I2CReceiveByte(void)
  82          {
  83   1        unsigned char da;
  84   1        unsigned char i;
  85   1        for(i=0;i<8;i++){   
  86   2          scl = 1;
  87   2          I2C_Delay(DELAY_TIME);
  88   2          da <<= 1;
  89   2          if(sda) 
  90   2            da |= 0x01;
  91   2          scl = 0;
  92   2          I2C_Delay(DELAY_TIME);
  93   2        }
  94   1        return da;    
  95   1      }
  96          
  97          //
  98          unsigned char I2CWaitAck(void)
  99          {
 100   1        unsigned char ackbit;
 101   1        
 102   1          scl = 1;
 103   1        I2C_Delay(DELAY_TIME);
 104   1          ackbit = sda; 
 105   1          scl = 0;
 106   1        I2C_Delay(DELAY_TIME);
 107   1        
 108   1        return ackbit;
 109   1      }
 110          
 111          //
 112          void I2CSendAck(unsigned char ackbit)
 113          {
 114   1          scl = 0;
 115   1          sda = ackbit; 
 116   1        I2C_Delay(DELAY_TIME);
C51 COMPILER V9.60.7.0   IIC                                                               02/27/2025 21:00:53 PAGE 3   

 117   1          scl = 1;
 118   1        I2C_Delay(DELAY_TIME);
 119   1          scl = 0; 
 120   1        sda = 1;
 121   1        I2C_Delay(DELAY_TIME);
 122   1      }
 123          
 124          
 125          
 126          
 127          uchar at2402_read(uchar address)
 128          {
 129   1          uchar Data;
 130   1      
 131   1          I2CStart();
 132   1      
 133   1          I2CSendByte(0xA0);
 134   1          I2CWaitAck();
 135   1      
 136   1          I2CSendByte(address);
 137   1          I2CWaitAck();
 138   1      
 139   1          I2CStart();
 140   1      
 141   1          I2CSendByte(0xA1);
 142   1          I2CWaitAck();
 143   1      
 144   1          Data = I2CReceiveByte();
 145   1          I2CSendAck(1);
 146   1      
 147   1          I2CStop();
 148   1          Delay15ms();
 149   1      
 150   1          return Data;
 151   1      }
 152          
 153          void at2402_write(uchar address,uchar Data)
 154          {
 155   1          I2CStart();
 156   1      
 157   1          I2CSendByte(0xA0);
 158   1          I2CWaitAck();
 159   1      
 160   1          I2CSendByte(address);
 161   1          I2CWaitAck();
 162   1      
 163   1          I2CSendByte(Data);
 164   1          I2CWaitAck();
 165   1      
 166   1          I2CStop();
 167   1          Delay15ms();
 168   1      }
 169          
 170          
 171          //0-255 0x00 0xff
 172          void AT24C02_Write(uchar *dat,uchar addr,uchar num)    //1.数据 2.地址 3.多少个数据
 173          {
 174   1        I2CStart();
 175   1      
 176   1        I2CSendByte(0xa0);
 177   1        I2CWaitAck();
 178   1      
C51 COMPILER V9.60.7.0   IIC                                                               02/27/2025 21:00:53 PAGE 4   

 179   1        I2CSendByte(addr);
 180   1        I2CWaitAck();
 181   1      
 182   1        while(num--)
 183   1        {
 184   2          I2CSendByte(*dat++);
 185   2          I2CWaitAck();
 186   2      
 187   2          I2C_Delay(200);
 188   2        }
 189   1        I2CStop();
 190   1        Delay15ms();
 191   1      }
 192          
 193          void AT24C02_Read(uchar *dat,uchar addr,uchar num)
 194          {
 195   1        I2CStart();
 196   1      
 197   1        I2CSendByte(0xa0);
 198   1        I2CWaitAck();
 199   1      
 200   1        I2CSendByte(addr);
 201   1        I2CWaitAck();
 202   1        
 203   1        I2CStart();
 204   1      
 205   1        I2CSendByte(0xa1);
 206   1        I2CWaitAck();
 207   1      
 208   1        while(num--)
 209   1        {
 210   2          *dat++=I2CReceiveByte();
 211   2          if(num)
 212   2                  I2CSendAck(0);
 213   2          else 
 214   2                  I2CSendAck(1);
 215   2        }
 216   1        I2CStop();
 217   1      }
 218          
 219          uchar pcf8591_ADC(uchar channel)
 220          {
 221   1          uchar adc;
 222   1      
 223   1          I2CStart();
 224   1      
 225   1          I2CSendByte(0x90);
 226   1          I2CWaitAck();
 227   1      
 228   1          I2CSendByte(channel);
 229   1          I2CWaitAck();
 230   1      
 231   1          I2CStart();
 232   1      
 233   1          I2CSendByte(0x91);
 234   1          I2CWaitAck();
 235   1      
 236   1          adc = I2CReceiveByte();
 237   1          I2CSendAck(1);
 238   1      
 239   1          I2CStop();
 240   1      
C51 COMPILER V9.60.7.0   IIC                                                               02/27/2025 21:00:53 PAGE 5   

 241   1          return adc;
 242   1      }
 243          
 244          void pcf8591_DA(uchar v)
 245          {
 246   1          I2CStart();
 247   1      
 248   1          I2CSendByte(0x91);
 249   1          I2CWaitAck();
 250   1      
 251   1          I2CSendByte(0x40);
 252   1          I2CWaitAck();
 253   1      
 254   1          I2CSendByte(v);
 255   1          I2CWaitAck();
 256   1      
 257   1          I2CStop();
 258   1      
 259   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    417    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
